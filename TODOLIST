=================================== TESTS ======================================
o recomparer le resultat de printf avec ft_printf pour la conversion d

================================== ELEGANZA ====================================
o dans les parsers, ajouter un null a la fin pour enlever le nombre de fonction
  dans la boucle (permet de rajouter simplement une fonction supplementaire sans
  avoir a changer le chiffre partout)
o les noms de fonctions ne sont pas case dependant donc conv_x == conv_X, 
  j'ai appelé ça big_x par defaut mais si tu preferes un autre nom on peut 
  trouver ça
o faire une fonction (error.c) a appeler pour mettre un message d'erreur

=================================== FINAL ======================================
o leaks

================================== PRINTF.C ====================================
x integrer les fonctions de stdarg pour la lecture des arguments de printf
  (DONE)
/ organiser les parsers pour les differentes parties de "%......" (MANQUE 
  PARSE_MODIFIERS)
x cas particulier : "%%"
o cas particulier : pas d'argument
o cas d'erreur : type de conversion et type d'argument incompatibles
o cas d'erreur : pas le meme nombre de % et d'arguments
o cas d'erreur : type de conversion non valide

================================= PARSE_FLAG.C =================================
/ attention : flag '0' : si '0' fait partie de la largeur de champ ou de la 
  precision, il ne faut pas appliquer le flag '0' (NE SEMBLE PAS POSER DE PB
  MAIS A CONFIRMER)

=============================== FLAG_FUNCTIONS.C ===============================
x gerer les differents flags en fonction des differentes conversions

================================== PARSE_CONV.C ================================
x ecrire le parseur qui repere la conversion (DONE)
x ajouter le modificateur dans le parseur
o cas d'erreur ? plusieurs omdificateurs

================================ CONV_FUNCTIONS.C ==============================
x ecrire les fonctions de conversion (utiliser va_arg()) 
  (DELETED - 1 FUNC PER CONV) 
