=================================== TESTS ======================================
o TEST ALL THE THINGS
	x conv c
	x conv s
	x conv p
	/ conv d (WITHOUT MODIFIERS)
	/ conv o (WITHOUT MODIFIERS)
	o conv u
	o conv x
	o conv X
	o conv f
o Gerer les erreurs d'arguments (on n'a pas de crash mais a savoir si on laisse
  la fonction marcher ou si on met un message d'erreur)
	o arguments en trop: printf met un warning "data argument not used by format
	  string"
	o argument manquant: printf met un warning "more % conversions than data
	  arguments" et affiche des trucs randoms
	o arguments du mauvais type: printf met un warning "format specifies type
	  '...' but the argument has type '...' et ne marche pas toujours

================================== ELEGANZA ====================================
o dans les parsers, ajouter un null a la fin pour enlever le nombre de fonction
  dans la boucle (permet de rajouter simplement une fonction supplementaire sans
  avoir a changer le chiffre partout)
o rendre le tout plus simple pour ajouter des fonctionalites
x faire une fonction (error.c) a appeler pour mettre un message d'erreur
x supprimer conv_i et utiliser conv_d a la place
x mettre les conv dans un fichier
o renommer les variables pour que le langage soit coherent partout

=================================== FINAL ======================================
o leaks

=================================== BONUS ======================================
o unicode
o couleurs

================================== PRINTF.C ====================================
x integrer les fonctions de stdarg pour la lecture des arguments de printf
  (DONE)
x organiser les parsers pour les differentes parties de "%......"
x cas particulier : "%%"
o cas particulier : pas d'argument
o cas d'erreur : type de conversion et type d'argument incompatibles
o cas d'erreur : pas le meme nombre de % et d'arguments
o cas d'erreur : type de conversion non valide
o ajouter le retour de printf

================================= PARSE_FLAG.C =================================
/ attention : flag '0' : si '0' fait partie de la largeur de champ ou de la 
  precision, il ne faut pas appliquer le flag '0' (NE SEMBLE PAS POSER DE PB
  MAIS A CONFIRMER)

=============================== FLAG_FUNCTIONS.C ===============================
x gerer les differents flags en fonction des differentes conversions

================================== PARSE_CONV.C ================================
x ecrire le parseur qui repere la conversion (DONE)
x ajouter le modificateur dans le parseur
o cas d'erreur ? plusieurs modificateurs

================================ CONV_FUNCTIONS.C ==============================
x ecrire les fonctions de conversion (utiliser va_arg())
o gerer les modificateurs de f
